{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d10340c0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className={'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'}>\n            <div>\n                <img src={`https://robohash.org/${id}?size=200x200`} alt={'stuff'}/>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n\nconst CardList = ({robots}) => {\n    const cardComponent = robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>;\n    });\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className={'pa2'}>\n            <input className={'pa3 ba b--green bg-lightest-blue'}\n                   type=\"search\"\n                   name=\"searchbox\"\n                   id=\"searchbox\"\n                   placeholder={'search robots'}\n                   onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY: 'scroll',\n            border: '1px solid black',\n            height: '500px'\n        }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {requestRobots, setSearchField} from \"../actions\";\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n        return isPending ?\n            <h1 className={'tc f1'}>Loading...</h1>\n            :\n            (\n                <div className={'tc'}>\n                    <h1 className={'f1'}>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({\n        type: REQUEST_ROBOTS_PENDING\n    });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data\n        }))\n        .catch(error => dispatch({\n            type: REQUEST_ROBOTS_FAIL,\n            payload: error\n        }))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAIL\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n\n        case REQUEST_ROBOTS_FAIL:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {createLogger} from \"redux-logger/src\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}